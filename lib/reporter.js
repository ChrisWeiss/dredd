// Generated by CoffeeScript 1.6.3
var Reporter, async, uuid,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

uuid = require('node-uuid');

async = require('async');

Reporter = (function() {
  function Reporter() {
    this.addReporter = __bind(this.addReporter, this);
    this.createReport = __bind(this.createReport, this);
    this.addTest = __bind(this.addTest, this);
    this.start = __bind(this.start, this);
    this._booleanResult = __bind(this._booleanResult, this);
    this.reporters = [];
    this.type = "Container";
    this.tests = [];
    this.stats = {
      tests: 0,
      failures: 0,
      passes: 0,
      timestamp: (new Date).toUTCString(),
      duration: 0
    };
  }

  Reporter.prototype._booleanResult = function() {
    return !(this.stats['failures'] > 0);
  };

  Reporter.prototype.start = function(opts, callback) {
    var err, iterator,
      _this = this;
    if (this.endedAt !== void 0 || this.booleanResult !== void 0) {
      err = new Error("Can't start ended test run. Reporter property 'endedAt' or 'booleanResult' is not null");
      return callback(err);
    }
    this.rawBlueprint = opts['rawBlueprint'];
    this.uuid = uuid.v4();
    this.startedAt = new Date().getTime() / 1000;
    iterator = function(childReporter, callback) {
      return childReporter.start(opts, function(error) {
        if (error) {
          return callback(error);
        } else {
          return callback();
        }
      });
    };
    return async.eachSeries(this.reporters, iterator, function(error) {
      if (error) {
        return callback(error);
      } else {
        return callback();
      }
    });
  };

  Reporter.prototype.addTest = function(test, callback) {
    var err, iterator,
      _this = this;
    if (this.endedAt !== void 0 || this.booleanResult !== void 0) {
      err = new Error("Can't start ended test run. Reporter property 'endedAt' or 'booleanResult' is not null");
      return callback(err);
    }
    this.tests.push(test);
    this.stats.tests += 1;
    switch (test.status) {
      case 'pass':
        this.stats.passes += 1;
        break;
      case 'fail':
        this.stats.failures += 1;
        break;
      default:
        return callback(new Error("Error adding test: must have status of pass or fail."));
    }
    iterator = function(childReporter, callback) {
      return childReporter.addTest(test, function(error) {
        if (error) {
          return callback(error);
        } else {
          return callback();
        }
      });
    };
    return async.eachSeries(this.reporters, iterator, function(error) {
      if (error) {
        return callback(error);
      } else {
        return callback();
      }
    });
  };

  Reporter.prototype.createReport = function(callback) {
    var iterator;
    this.endedAt = new Date().getTime() / 1000;
    this.booleanResult = this._booleanResult();
    iterator = function(reporter, callback) {
      return reporter.createReport(function(error) {
        if (error) {
          return callback(error);
        } else {
          return callback();
        }
      });
    };
    return async.eachSeries(this.reporters, iterator, function(error) {
      if (error) {
        return callback(error);
      } else {
        return callback();
      }
    });
  };

  Reporter.prototype.addReporter = function(reporter) {
    this.reporters.push(reporter);
    return this;
  };

  return Reporter;

})();

module.exports = Reporter;
