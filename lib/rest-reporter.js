// Generated by CoffeeScript 1.6.3
var Reporter, RestReporter, http, https, logger, os, packageConfig, url, verbose,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

http = require('http');

https = require('https');

logger = require('./logger');

Reporter = require('./reporter');

url = require('url');

os = require('os');

packageConfig = require('./../package.json');

String.prototype.startsWith = function(str) {
  return this.slice(0, str.length) === str;
};

verbose = process.env['DREDD_REST_DEBUG'] != null;

RestReporter = (function(_super) {
  __extends(RestReporter, _super);

  function RestReporter(configuration) {
    this._performRequest = __bind(this._performRequest, this);
    this.createReport = __bind(this.createReport, this);
    this.addTest = __bind(this.addTest, this);
    this.start = __bind(this.start, this);
    var error;
    RestReporter.__super__.constructor.call(this);
    this.type = "rest";
    error = new Error('Configuration should have \'restReporter\' key under \'options\'');
    if (!configuration.options.restReporter) {
      thorw(error);
    }
    this.configuration = configuration.options.restReporter;
  }

  RestReporter.prototype.start = function(opts, callback) {
    var data, path,
      _this = this;
    RestReporter.__super__.start.call(this, opts, function(error) {
      if (error) {
        return callback(error);
      }
    });
    path = '/apis/' + this.configuration['suite'] + '/tests/runs';
    data = {
      blueprint: opts['rawBlueprint'],
      agent: process.env['DREDD_AGENT'] || process.env['USER'],
      agentRunUuid: this.uuid,
      hostname: process.env['DREDD_HOSTNAME'] || os.hostname(),
      startedAt: this.startedAt,
      "public": true,
      status: 'running',
      ci: process.env['CI'] != null
    };
    if (process.env['CI']) {
      data['ciData'] = {
        name: process.env['CI_BUILD_NAME'],
        buildId: process.env['CI_BUILD_ID'],
        buildNumber: process.env['CI_BUILD_NUMBER'],
        jobId: process.env['CI_JOB_ID'],
        jobNumber: process.env['CI_JOB_NUMBER']
      };
    }
    return this._performRequest(path, 'POST', data, function(error, response, parsedBody) {
      if (error) {
        return callback(error);
      } else {
        _this.remoteId = parsedBody['_id'];
        return callback();
      }
    });
  };

  RestReporter.prototype.addTest = function(test, callback) {
    var data, path;
    RestReporter.__super__.addTest.call(this, test, function(error) {
      if (error) {
        return callback(error);
      }
    });
    path = '/apis/' + this.configuration['suite'] + '/tests/steps?testRunId=' + this.remoteId;
    data = {
      testRunId: this.remoteId,
      origin: test['origin'],
      duration: test['duration'],
      result: test['status'],
      stepType: 'exampleTransaction',
      resultData: {
        request: test['request'],
        realResponse: test['actual'],
        expectedResponse: test['expected'],
        result: test['result']
      }
    };
    return this._performRequest(path, 'POST', data, function(error, response, parsedBody) {
      if (error) {
        return callback(error);
      } else {
        test['remoteId'] = parsedBody['_id'];
        return callback();
      }
    });
  };

  RestReporter.prototype.createReport = function(callback) {
    var data, path;
    RestReporter.__super__.createReport.call(this, function(error) {
      if (error) {
        return callback(error);
      }
    });
    data = {
      endedAt: this.endedAt,
      status: this.booleanResult ? 'passed' : 'failed',
      result: this.stats
    };
    path = '/apis/' + this.configuration['suite'] + '/tests/run/' + this.remoteId;
    return this._performRequest(path, 'PATCH', data, function(error, response, parsedBody) {
      if (error) {
        return callback(error);
      } else {
        return callback();
      }
    });
  };

  RestReporter.prototype._performRequest = function(path, method, body, callback) {
    var buffer, handleRequest, info, options, parsedUrl, req, system;
    buffer = "";
    handleRequest = function(res) {
      var _this = this;
      res.on('data', function(chunk) {
        logger.info('REST Reporter HTTPS Response chunk: ' + chunk);
        return buffer = buffer + chunk;
      });
      res.on('error', function(error) {
        if (verbose) {
          logger.info('REST Reporter HTTPS Response error.');
        }
        return callback(error, req, res);
      });
      return res.on('end', function() {
        var info, parsedBody;
        if (verbose) {
          logger.info('Rest Reporter Response ended');
        }
        parsedBody = JSON.parse(buffer);
        if (verbose) {
          info = {
            headers: res.headers,
            statusCode: res.statusCode,
            body: parsedBody
          };
          logger.info('Rest Reporter Response:', JSON.stringify(info, null, 2));
        }
        return callback(void 0, res, parsedBody);
      });
    };
    parsedUrl = url.parse(this.configuration['apiUrl']);
    system = os.type() + ' ' + os.release() + '; ' + os.arch();
    options = {
      host: parsedUrl['hostname'],
      port: parsedUrl['port'],
      path: path,
      method: method,
      headers: {
        'Authentication': 'Token ' + this.configuration['apiToken'],
        'User-Agent': "Dredd REST Reporter/" + packageConfig['version'] + " (" + system + ")"
      }
    };
    if (verbose) {
      info = {
        options: options,
        body: body
      };
      logger.info('Rest Reporter Request:', JSON.stringify(info, null, 2));
    }
    if (this.configuration.apiUrl.startsWith('https')) {
      if (verbose) {
        logger.info('Starting REST Reporter HTTPS Request');
      }
      req = https.request(options, handleRequest);
    } else {
      if (verbose) {
        logger.info('Starting REST Reporter HTTP Response');
      }
      req = http.request(options, handleRequest);
    }
    req.write(JSON.stringify(body));
    return req.end();
  };

  return RestReporter;

})(Reporter);

module.exports = RestReporter;
